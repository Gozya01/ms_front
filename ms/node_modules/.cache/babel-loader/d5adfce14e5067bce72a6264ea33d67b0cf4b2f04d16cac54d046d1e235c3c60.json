{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        username: '',\n        password: '',\n        agree: false\n      },\n      usernameError: '',\n      passwordError: '',\n      dialogVisible: false,\n      submitMessage: '',\n      noSpacesValid: false,\n      lengthValid: false,\n      complexityValid: false,\n      showPasswordRules: false\n    };\n  },\n  methods: {\n    validatePassword() {\n      const password = this.form.password;\n\n      // 检查是否包含空格\n      this.noSpacesValid = !/\\s/.test(password);\n\n      // 检查长度是否为8-16字符\n      this.lengthValid = password.length >= 8 && password.length <= 16;\n\n      // 检查密码复杂度，是否包含至少2种类型（字母、数字、符号）\n      const hasLetter = /[a-zA-Z]/.test(password);\n      const hasNumber = /\\d/.test(password);\n      const hasSpecialChar = /[\\W_]/.test(password);\n      const validTypes = [hasLetter, hasNumber, hasSpecialChar].filter(Boolean).length;\n      this.complexityValid = validTypes >= 2;\n    },\n    // 检查用户名\n    checkUsername() {\n      if (!this.form.username) {\n        this.usernameError = '用户名不能为空';\n      } else {\n        this.usernameError = '';\n      }\n    },\n    checkPassword() {\n      this.showPasswordRules = false;\n      if (!this.form.password) {\n        this.passwordError = '密码不能为空';\n      } else {\n        this.passwordError = '';\n      }\n    },\n    submitForm() {\n      if (!this.form.username || !this.form.password || !this.form.agree) {\n        this.submitMessage = '登录失败，请填写完整信息并同意服务协议。';\n        this.dialogVisible = true;\n      }\n      const user = {\n        username: this.form.username,\n        password: this.form.password\n      };\n      axios.post('http://localhost:28080/users', user).then(response => {\n        if (response.data.code === 200) {\n          //判断注册是否成功\n          this.submitMessage = `注册成功,欢迎 ${this.form.username}!`;\n          this.dialogVisible = true;\n        } else {\n          console.error(response.data.msg);\n          this.submitMessage = `注册失败!,欢迎 ${this.form.username}!`;\n          this.dialogVisible = true;\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","form","username","password","agree","usernameError","passwordError","dialogVisible","submitMessage","noSpacesValid","lengthValid","complexityValid","showPasswordRules","methods","validatePassword","test","length","hasLetter","hasNumber","hasSpecialChar","validTypes","filter","Boolean","checkUsername","checkPassword","submitForm","user","axios","post","then","response","code","console","error","msg","catch"],"sources":["src/components/RegisterForm.vue"],"sourcesContent":["<template>\n  <div id=\"app\" class=\"register-container\">\n    <!-- 标题与副标题 -->\n    <h2 class=\"register-title\">欢迎注册秒杀系统</h2>\n    <p class=\"register-subtitle\">每天，乐在抢购。</p>\n\n    <!-- 注册表单 -->\n    <el-form :model=\"form\" ref=\"form\" class=\"form-box\">\n      <!-- 用户名输入框 -->\n      <el-form-item :error=\"usernameError\">\n        <el-input v-model=\"form.username\" placeholder=\"昵称\" style=\"width: 300px\" @blur=\"checkUsername\"></el-input>\n      </el-form-item>\n\n      <!-- 密码输入框 -->\n      <el-form-item :error=\"passwordError\">\n        <el-input v-model=\"form.password\" placeholder=\"密码\" type=\"password\" style=\"width: 300px\" @blur=\"checkPassword\"\n          @input=\"validatePassword\" @focus=\"showPasswordRules = true\"></el-input>\n      </el-form-item>\n      <!-- 密码规则提示 -->\n      <div v-if=\"showPasswordRules\" class=\"password-rules\">\n        <p>\n          <span v-if=\"noSpacesValid\" :class=\"{ valid: noSpacesValid }\">✔</span> 不能包括空格\n        </p>\n        <p>\n          <span v-if=\"lengthValid\" :class=\"{ valid: lengthValid }\">✔</span> 长度为8-16个字符\n        </p>\n        <p>\n          <span v-if=\"complexityValid\" :class=\"{ valid: complexityValid }\">✔</span> 必须包含字母、数字、符号中至少2种\n        </p>\n      </div>\n      <!-- 协议复选框 -->\n      <el-form-item>\n        <el-checkbox v-model=\"form.agree\">\n          我已阅读并同意\n          <a href=\"#\">服务协议</a> 和\n          <a href=\"#\">隐私政策</a>\n        </el-checkbox>\n      </el-form-item>\n\n      <!-- 注册按钮 -->\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitForm\" style=\"width: 300px\">\n          立即注册\n        </el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- 注册成功/失败信息 -->\n    <el-dialog :visible.sync=\"dialogVisible\" title=\"注册信息\">\n      <p>{{ submitMessage }}</p>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      form: {\n        username: '',\n        password: '',\n        agree: false\n      },\n      usernameError: '',\n      passwordError: '',\n      dialogVisible: false,\n      submitMessage: '',\n      noSpacesValid: false,\n      lengthValid: false,\n      complexityValid: false,\n      showPasswordRules: false\n    };\n  },\n  methods: {\n    validatePassword() {\n      const password = this.form.password;\n\n      // 检查是否包含空格\n      this.noSpacesValid = !/\\s/.test(password);\n\n      // 检查长度是否为8-16字符\n      this.lengthValid = password.length >= 8 && password.length <= 16;\n\n      // 检查密码复杂度，是否包含至少2种类型（字母、数字、符号）\n      const hasLetter = /[a-zA-Z]/.test(password);\n      const hasNumber = /\\d/.test(password);\n      const hasSpecialChar = /[\\W_]/.test(password);\n      const validTypes = [hasLetter, hasNumber, hasSpecialChar].filter(Boolean).length;\n      this.complexityValid = validTypes >= 2;\n    },\n    // 检查用户名\n    checkUsername() {\n      if (!this.form.username) {\n        this.usernameError = '用户名不能为空';\n      } else {\n        this.usernameError = '';\n      }\n    },\n    checkPassword() {\n      this.showPasswordRules = false;\n      if (!this.form.password) {\n        this.passwordError = '密码不能为空';\n      } else {\n        this.passwordError = '';\n      }\n    },\n    submitForm() {\n      if (!this.form.username || !this.form.password || !this.form.agree) {\n        this.submitMessage = '登录失败，请填写完整信息并同意服务协议。';\n        this.dialogVisible = true;\n      }\n\n      const user = { username:this.form.username,password: this.form.password};\n      axios.post('http://localhost:28080/users', user)\n        .then(response => {\n          if (response.data.code === 200) {\n            //判断注册是否成功\n            this.submitMessage = `注册成功,欢迎 ${this.form.username}!`;\n            this.dialogVisible = true;\n            }\n          else {\n            console.error(response.data.msg);\n            this.submitMessage = `注册失败!,欢迎 ${this.form.username}!`;\n            this.dialogVisible = true;\n          }\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* 容器居中 */\n.register-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background-color: #f0f2f5;\n}\n\n/* 标题与副标题 */\n.register-title {\n  font-size: 26px;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 10px;\n}\n\n.register-subtitle {\n  font-size: 14px;\n  color: #999;\n  margin-bottom: 30px;\n}\n\n/* 表单容器 */\n.form-box {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* 注册按钮 */\n.el-button--primary {\n  background-color: #409eff;\n  border-color: #409eff;\n  color: white;\n  font-size: 16px;\n}\n\n/* 链接样式 */\na {\n  color: #409eff;\n}\n\n/* 密码规则提示 */\n.password-rules p {\n  font-size: 12px;\n  margin: 5px 0;\n}\n\n/* 对号标记 */\n.valid {\n  color: green;\n}\n</style>"],"mappings":"AAuDA;EACAA,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,QAAA;QACAC,KAAA;MACA;MACAC,aAAA;MACAC,aAAA;MACAC,aAAA;MACAC,aAAA;MACAC,aAAA;MACAC,WAAA;MACAC,eAAA;MACAC,iBAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA,MAAAX,QAAA,QAAAF,IAAA,CAAAE,QAAA;;MAEA;MACA,KAAAM,aAAA,SAAAM,IAAA,CAAAZ,QAAA;;MAEA;MACA,KAAAO,WAAA,GAAAP,QAAA,CAAAa,MAAA,SAAAb,QAAA,CAAAa,MAAA;;MAEA;MACA,MAAAC,SAAA,cAAAF,IAAA,CAAAZ,QAAA;MACA,MAAAe,SAAA,QAAAH,IAAA,CAAAZ,QAAA;MACA,MAAAgB,cAAA,WAAAJ,IAAA,CAAAZ,QAAA;MACA,MAAAiB,UAAA,IAAAH,SAAA,EAAAC,SAAA,EAAAC,cAAA,EAAAE,MAAA,CAAAC,OAAA,EAAAN,MAAA;MACA,KAAAL,eAAA,GAAAS,UAAA;IACA;IACA;IACAG,cAAA;MACA,UAAAtB,IAAA,CAAAC,QAAA;QACA,KAAAG,aAAA;MACA;QACA,KAAAA,aAAA;MACA;IACA;IACAmB,cAAA;MACA,KAAAZ,iBAAA;MACA,UAAAX,IAAA,CAAAE,QAAA;QACA,KAAAG,aAAA;MACA;QACA,KAAAA,aAAA;MACA;IACA;IACAmB,WAAA;MACA,UAAAxB,IAAA,CAAAC,QAAA,UAAAD,IAAA,CAAAE,QAAA,UAAAF,IAAA,CAAAG,KAAA;QACA,KAAAI,aAAA;QACA,KAAAD,aAAA;MACA;MAEA,MAAAmB,IAAA;QAAAxB,QAAA,OAAAD,IAAA,CAAAC,QAAA;QAAAC,QAAA,OAAAF,IAAA,CAAAE;MAAA;MACAwB,KAAA,CAAAC,IAAA,iCAAAF,IAAA,EACAG,IAAA,CAAAC,QAAA;QACA,IAAAA,QAAA,CAAA9B,IAAA,CAAA+B,IAAA;UACA;UACA,KAAAvB,aAAA,mBAAAP,IAAA,CAAAC,QAAA;UACA,KAAAK,aAAA;QACA,OACA;UACAyB,OAAA,CAAAC,KAAA,CAAAH,QAAA,CAAA9B,IAAA,CAAAkC,GAAA;UACA,KAAA1B,aAAA,oBAAAP,IAAA,CAAAC,QAAA;UACA,KAAAK,aAAA;QACA;MACA,GACA4B,KAAA,CAAAF,KAAA;QACAD,OAAA,CAAAC,KAAA,CAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}